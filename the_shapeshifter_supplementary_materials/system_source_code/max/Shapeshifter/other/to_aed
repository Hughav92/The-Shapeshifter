// Formats a list of azimuth and radial distance values as a list
// of commands for the position of Ambisonics object
// for ambiencoder object of the ICTS Ambisonics library

// Also scales radial distance to 

// Inlets
// 0: List of azimuth values
// 1: List of radial distance objects

// Outlets
// 0: List of commands to specify position of Ambisonics object

// Arguments
// 0: Cycle of performance for which this object is used
// 1: Number of Ambisonics objects per position markers in performance
// 2: Scaling factor for radial distance

inlets = 2;
outlets = 1;

// Parse arguments 
if(jsarguments.length > 3){

	// Ambisonics object index scaling factor
	var scaling_factor = jsarguments[1]-1;

	// Number of position markers in performance
	var no_objects = jsarguments[2];

	// Scaling factor for radial distance
	var radial_scaling = jsarguments[3];
	}

// Else set to defaults
else{
	var scaling_factor = 0
	var no_objects = 1
	var radial_scaling = 1
	}

// Create index modifier	
index_plus = scaling_factor*no_objects;

// Declare array for radial distance values
d_vals = []

	
function list(msg){
	
	// Push radial distance values to array
	if(inlet == 1){
		for(j = 0; j < arguments.length; j++){
			d_vals.push(arguments[j]);
			}
		}

	// Input azimuth values to cause output
	if(inlet == 0){

		// Declare array for command outputs
		var output = [];

		// Declare array for Ambisonics object indices
		var indices = [];

		// Declare array for azimuth values
		var a_vals = [];

		for(i = 0; i < arguments.length; i++){

			// Push azimuth values to array
			a_vals.push(arguments[i]);

			// Push Ambisonics object indices to array
			indices.push(i+1+index_plus);
			}

		// Push commands to output array
		for(i = 0; i < arguments.length; i++){
			output.push("aed " + indices[i] + " " + arguments[i] + " " + 0  + " " + d_vals[i]*radial_scaling);
			}

		// Output commands
		for(i = 0; i < output.length; i++){
			outlet(0, output[i]);
			}

		// Reset distance values array
		d_vals = []
		}
	}